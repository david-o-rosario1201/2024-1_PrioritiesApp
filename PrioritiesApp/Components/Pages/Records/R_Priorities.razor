@page "/priorities"
@inject PrioritiesBLL priorityBLL;
@rendermode InteractiveServer

<PageTitle>Registro Prioridades</PageTitle>

<EditForm Model="priority" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3><strong>REGISTRO DE PRIORIDADES</strong></h3>
            </div>
            <div class="card-body">
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4"></div>
                @*ID*@
                <label class="row" for="prioridadId"><strong>ID:</strong></label>
                <div class="id">
                    <InputNumber id="prioridadId" class="form-control" @bind-Value="priority.PriorityId"></InputNumber>
                    <button @onclick="Buscar" class="btn btn-primary" type="button"><i class="bi bi-search" />Buscar</button>
                    <ValidationMessage For="@(() => priority.PriorityId)" />
                </div>
                @*Descripcion*@
                <label class="row" for="entradaDescripcion"><strong>Descripci&oacute;n:</strong></label>
                <div class="descripcion">
                    <InputText id="entradaDescripcion" class="form-control" placeholder="Escribe una descripci&oacute;n" @bind-Value="priority.Description"></InputText>
                    <ValidationMessage For="@(() => priority.Description)" />
                </div>  
                @*Dias compromiso*@
                <label for="entradaDiasCompromiso"><strong>Dias compromiso:</strong></label>
                <div class="compromiso">
                    <InputNumber id="entradaDiasCompromiso" class="form-control" @bind-Value="priority.DaysCommitment"></InputNumber>
                    <ValidationMessage For="@(() => priority.DaysCommitment)" />
                </div>
                <div class="mb-3"></div>
            </div>
            @*Botones*@
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-primary" @onclick="Nuevo">
                        <i class="bi bi-file-earmark-plus-fill" /> Nuevo
                    </button>
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-floppy-fill" /> Guardar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar">
                        <i class="bi bi-trash-fill" /> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
    @*Mensaje*@
    <div class="mensaje">
        <span class="error"><p>@mensajeError</p></span>
        <span class="exito"><p>@mensajeExito</p></span>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? PriorityId { get; set; }
    public Priorities priority { get; set; } = new Priorities();
    public string guardarPrioridad { get; set; } = string.Empty;
    public string mensajeError { get; set; } = string.Empty;
    public string mensajeExito { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        if (PriorityId.HasValue)
        {
            priority.PriorityId = PriorityId.Value;
            Buscar();
        }
    }

    public void Nuevo()
    {
        priority = new Priorities();
        mensajeError = string.Empty;
        mensajeExito = string.Empty;
    }

    public async Task Guardar()
    {
        if (await ValidarDescripcion())//validar que la descripcion no exista
        {
            if (priority.PriorityId == 0)//cuando se esta guardando una descripcion nueva
            {
                mensajeError = "Error, esta descripcion ya existe";
                mensajeExito = string.Empty;
            }

            else//Modificar
            {
                var modificar = await priorityBLL.Guardar(priority);
                if(modificar)
                {
                    mensajeError = string.Empty;
                    mensajeExito = "Los datos se actualizaron con exito!";
                }
            }
        }   
        else
        {
            var guardo = await priorityBLL.Guardar(priority);
            if (guardo)
            {
                mensajeError = string.Empty;
                mensajeExito = "Se guardo correctamente";  
            }
            else
            {
                mensajeError = "No se pudo guardar";
                mensajeExito = string.Empty;
            }
        }
    }

    public async Task<bool> ValidarDescripcion()
    {
        var valor = await priorityBLL.BuscarDescripcion(priority.Description);

        return valor != null;
    }


    public async Task Buscar()
    {
        if(priority.PriorityId <= 0)
        {
            mensajeError = "Error, no se aceptan Id menores que 1";
            mensajeExito = string.Empty;
            return;
        }
        var buscar = await priorityBLL.BuscarId(priority.PriorityId);

        if (buscar != null)
        {
            priority = buscar;
            guardarPrioridad = priority.Description;
            mensajeError = string.Empty;
            mensajeExito = "Priodad encontrada";
        }

        else
        {
            mensajeError = $"No se encontraron dastos con el id: {priority.PriorityId}";
            mensajeExito = string.Empty;
        }
    }

    public async Task Eliminar()
    {
        await priorityBLL.Eliminar(priority);
        mensajeError = string.Empty;
        mensajeExito = "El dato se ha elimiando con exito!";
    }
}