@page "/Prioridades"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject PrioritiesService prioritiesService
@inject NavigationManager NavigationManager

<PageTitle>Prioridades</PageTitle>

<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Prioridades</strong></h3>
			<div class="d-flex align-items-start">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="IrACrear">Crear</button>
				</div>
				<button type="button" class="btn btn-outline-info" @onclick="IrADetalles">Detalles</button>
			</div>
		</div>
		@*Body*@
		<div class="card-body">
			<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4"></div>
			@if(prioridadesList.Count ==0)
			{
				<p><em>Cargando...</em></p>
			}
			else
			{
				<table class="table table-bordered">
					<thead>
						<tr>
							<th>PrioridadId</th>
							<th>Descripci&oacute;n</th>
							<th>D&iacute;asCompromiso</th>
						</tr>
					</thead>
					<tbody>
						@foreach(var prioridades in prioridadesList)
						{
							<tr>
								<td>@prioridades.PriorityId</td>
								<td>@prioridades.Description</td>
								<td>@prioridades.DaysCommitment</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		@*Footer*@
		<div class="card-footer">
			<p><strong>Total de Prioridades:</strong> @prioridadesList.Count</p>
		</div>
	</div>
</div>

@code {
	public Priorities prioridad { get; set; } = new Priorities();
	public List<Priorities> prioridadesList = new List<Priorities>();

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		Expression<Func<Priorities, bool>> criterio = prioridad => prioridad.PriorityId > 0;
		prioridadesList = await prioritiesService.Listar(criterio);
	}

	void IrACrear()
	{
		NavigationManager.NavigateTo("/CreatePrioridades");
	}

	void IrADetalles()
	{
		NavigationManager.NavigateTo("/DetailsPrioridades");
	}
}
